{% set name = "pykx" %}
{% set version = "2.3.2" %}
# this switch disables all upstream test because of a time out issue on some platforms that still
# needs investigation
{% set upstream_tests_are_enabled = False %}
# this switch should be enabled if a license can be used to run the tests below (see base64 license)
{% set kx_license_available = False %}
# this switch should be enabled if kdb can be downloaded as a test dependency
{% set install_kdb_as_test_dep = False %}
# # this switch enables experimental win-64 build depending on vs2010_runtime
{% set winbuild_enabled = False %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  git_url: https://github.com/KxSystems/pykx
  git_rev: {{ version }}
  patches:
    - patches/0001-load_pyarrow_unsafe-always-true.patch

build:
  # skipping s390x and ppc64le because kx does not support these with their pre-built binaries
  # skipping win because upstream q.dll and e.dll depend on an older MSVC runtime Anaconda no longer supports
  skip: True  # [s390x or ppc64le]
{% if not winbuild_enabled %}
  skip: True  # [win]
{% endif %}
  missing_dso_whitelist:   # [win]
  # both present in this package or vs2010_runtime but conda-build doens't find them
    - $RPATH/MSVCR100.dll  # [win]
    - $RPATH/q.dll         # [win]
  number: 0

requirements:
  build:
    - {{ compiler('c') }}
    - git       # [not win]
    - patchelf  # [linux and x86_64]
    - patch     # [not win]
    - m2-patch  # [win]
  host:
    - python
    - cython 3.0.0
    - numpy 1.22  # [py!=37]
    - numpy 1.20  # [py==37]
    - setuptools
    - setuptools-scm 7.1.0
    - tomli 2.0.1
    - dlfcn-win32 1.4.1  # [win]
    - wheel
    - pip
  run:
    - python
    - pandas >=1.2,<2.2.0
    - pytz >=2022.1
    - toml >=0.10.2
    # for the moment, this package comes from the free channel, which needs to be enabled in abs.yaml
    - vs2010_runtime 10.00.40219.1  #[win]
    - {{ pin_compatible('numpy') }}

# skipping test version because regex in test is wrong
{% set tests_to_skip = "test_version" %}
# skipping test that fails because test does not expand relative path
{% set tests_to_skip = tests_to_skip + " or test_check_license_no_qlic" %}
# skip test import from other dir, because QHOME variables need to be reset (probably a bug in kx, not a dramatic one)
{% set tests_to_skip = tests_to_skip + " or test_import_from_other_dir" %}

test:
  source_files:
    - tests
  commands:
    - pip check
{% if not kx_license_available %}
    # classic import test fails without a license because of the disclaimer being printed out
    # but calling it this way circumvents that
    - python -c "import pykx"
    - python -c "import pykx._pyarrow"
{% endif %}
{% if upstream_tests_are_enabled %}
{% if kx_license_available %}
    # This is a trick to get a kc.lic to be installed into the $QHOME directory. KX sends an email with the base64
    # encoded string version of the license, after requesting a license at https://kx.com/kdb-insights-personal-edition-license-download/.
    # The installation of this license allows to test all the licensed features of kx. Insert a base64 license and
    # uncomment the line to enable such tests
    {% set license_base64_encoded = "<insert license here>" %}
    - python -c "import base64, os; t = '{{ license_base64_encoded }}'; t = t.encode('ascii'); decoded = base64.decodebytes(t); os.mkdir('q'); bf = open(os.path.join('q','kc.lic'), 'wb'); bf.write(decoded); bf.close()"
    # As first thing in conftest.py there is a backup of the env var QHOME
    # if not set, at least empty, it will exit with error
    - export QHOME=
    - export PYKX_IGNORE_QHOME=1
    # This sets the folder path where the kc.lic file just created above are to be searched by pykx
    - export QLIC=q
    - export QARGS="--licensed"
    {% set skip_unlicensed = "-m 'not unlicensed'" %}
    # If the license is properly installed, these two imports should succeed
    - python -c "import pykx"
    - python -c "import pykx._pyarrow"
{% else %}
    - export QARGS="--unlicensed"
    - export DISABLE_LICENSED=" or licensed"
{% endif %}
{% if install_kdb_as_test_dep %}
    # with kdb available, all tests that require a kbd+ installations are run
    - pytest -n auto -k "not ({{ tests_to_skip }} $DISABLE_LICENSED)" tests/test_toq.py tests/test_util.py tests/test_ctx.py tests/test_query.py tests/test_wrappers.py tests/test_system.py tests/test_console.py tests/test_q_future.py tests/test_write.py tests/test_read.py tests/test_q.py tests/test_ipc.py tests/test_config.py
{% else %}
    # with kdb unavailable, the following many tests need to be disabled
    # - pytest -n auto -k "not ({{ tests_to_skip }} $DISABLE_LICENSED or test_from_callable or test_from_arrow_licensed)" tests/test_toq.py
    # test_cached_property, test_dir: TimeoutError: No response from isolated test
    - pytest -n auto -k "not ({{ tests_to_skip }} $DISABLE_LICENSED or test_pickle_pykx_df_block_manager or test_dir or test_cached_property or test_normalize_to_bytes)" tests/test_util.py
    # - pytest -n auto -k "not ({{ tests_to_skip }} $DISABLE_LICENSED or test_dot_q_errors or test_paths or test_update_global_context or test_dir or test_iter or test_reserved_words or test_ctx_no_overwrite_qerror or test_fqn or test_update_context or test_repr or test_with_block_errors_over_ipc or test_expunge or test_del or test_dot_z or test_dot_z)" tests/test_ctx.py
    # - pytest -n auto -k "not ({{ tests_to_skip }} $DISABLE_LICENSED or test_upsert_match_schema or test_update or test_query_pa or test_delete or test_delete_async or test_update_async or test_insert_match_schema or test_select_async or test_exec_async or test_select or test_exec)" tests/test_query.py
    # - pytest -n auto -k "not ({{ tests_to_skip }} $DISABLE_LICENSED or test_t_property or test_is_atom or test_hash or test_pickling or test_t_attr or test_call_unlicensed or test_symbolic_function)" tests/test_wrappers.py
    # - pytest -n auto -k "not ({{ tests_to_skip }} $DISABLE_LICENSED or test_system_display_size_ipc or test_system_tables_ipc or test_system_precision_ipc or test_system_namespace_ipc or test_system_load_ipc or test_system_gc_mode_ipc or test_system_console_size_ipc or test_system_workspace_ipc or test_system_date_parsing_ipc or test_system_random_seed_ipc or test_system_functions_ipc or test_system_rename_ipc or test_system_week_offset_ipc or test_system_variables_ipc or test_system_utc_ipc or test_system_cd_ipc or test_num_threads)" tests/test_system.py
    # - pytest -n auto -k "not ({{ tests_to_skip }} $DISABLE_LICENSED or test_basic_usage or test_q_error or test_input_eof_empty or test_entering_blank_lines or test_input_eof_newlines or test_input_eof_assignment or test_switching_mode or test_k_mode)" tests/test_console.py
    # - pytest -n auto -k "not ({{ tests_to_skip }} $DISABLE_LICENSED or test_q_future_callbacks or test_q_future_errors or test_internal_await)" tests/test_q_future.py
    # - pytest -n auto -k "not ({{ tests_to_skip }} $DISABLE_LICENSED or test_read_write_splayed or test_read_write_serialized_async or test_read_write_serialized or test_write_json or test_write_splayed or test_read_write_splayed_async  or test_read_write_csv_async or test_read_write_json_async or test_write_serialized or test_read_write_csv or test_read_write_json or test_write_csv)" tests/test_write.py
    # - pytest -n auto -k "not ({{ tests_to_skip }} $DISABLE_LICENSED or test_read_csv or test_read_csv_with_type_guessing or test_read_json or test_read_fixed_async or test_read_serialized or test_read_fixed or test_read_splayed )" tests/test_read.py
    # - pytest -n auto -k "not ({{ tests_to_skip }} $DISABLE_LICENSED or test_import_from_other_dir or test_delitem or test_attributes or test_call_with_params or test_call_sync or test_setitem or test_getitem or test_dir or test_setattr)" tests/test_q.py
    # - pytest -n auto -k "not ({{ tests_to_skip }} $DISABLE_LICENSED or test_ipc_messaging_tcp_auth or test_async_deferred_calls or test_raw_await or test_memory_domain or test_ipc_messaging_tcp_compression_edge_case or test_no_pyfunc_over_ipc or test_raw_complex or test_tls_and_unix_error or test_ipc_messaging_unix or test_async_q_connection_clears_calls_on_close or test_raw_poll_send_recv_all or test_secure_q_con_callable or test_eventloop_gather_order or test_async_timeout or test_ipc_messaging_unix_auth or test_raw_poll_send_recv_one or test_async_q_connection or test_async_with_q_features or test_async_repr or test_no_pykx_namespace or test_async_helpful_error_for_closed_conn or test_max_error_length or test_no_wrap_over_ipc or test_uninitialized_connection or test_no_ctx_not_used or test_repr or test_raw_poll_send_recv_n or test_sync_helpful_error_for_closed_conn or test_ipc_messaging_tcp or test_timeout)" tests/test_ipc.py
    # - pytest -n auto -k "not ({{ tests_to_skip }} $DISABLE_LICENSED or test_QHOME)" tests/test_config.py
{% endif %}
    # these are all other tests
    - pytest -n auto -k "not ({{ tests_to_skip }} $DISABLE_LICENSED)" test/test_cast.py test/test_pandas_apply.py test/test_register.py test/test_sql.py test/test_cloud_edition.py test/test_license.py
    - pytest -n auto -k "not ({{ tests_to_skip }} $DISABLE_LICENSED)" test/test_pandas_set_index.py  test/test_q_foreign.py  test/test_random.py test/test_exceptions.py  test/test_pandas_api.py  test/test_pykx.py test/test_schema.py
{% endif %}
  requires:
    - pip
    - plotly
    - pytest
    - pytest-asyncio
    - pytest-xdist
    - pytest-randomly
    - psutil
    - pytest-timeout
    - pyarrow         # [not s390x]
{% if install_kdb_as_test_dep %}
    # kdb is only present on the anaconda.org/kx channel, hence the channel needs to be enabled in abs.yaml
    # in the future we may agree with kx to distribute this package ourselves.
    - kdb
{% endif %}

about:
  home: https://code.kx.com/pykx
  license: LicenseRef-Proprietary and Apache-2.0
  license_file: LICENSE.txt
  license_family: Other
  summary: An interface between Python and q.
  description: |
    PyKX is a Python first interface to the worlds fastest time-series database kdb+ and it's underlying vector
    programming language q. PyKX takes a Python first approach to integrating q/kdb+ with Python following 10+ years of
    integrations between these two languages. Fundamentally it provides users with the ability to efficiently query and
    analyze huge amounts of in-memory and on-disk time-series data.
  doc_url: https://code.kx.com/pykx
  dev_url: https://github.com/KxSystems/pykx

extra:
  recipe-maintainers:
    - boldorider4
  skip-lints:
    - missing_imports_or_run_test_py
