{% set name = "pykx" %}
{% set version = "2.1" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  git_url: https://github.com/KxSystems/pykx
  git_rev: release/{{ version }}
  patches:
    - 0001-Addition-of-missing-file.patch
    - 0002-remove-linker-flags.patch

build:
  # skipping s390x and ppc64le because kx does not support these with their pre-built binaries
  skip: True  # [s390x or ppc64le or (not win)]
  script:
    - if [ -d $SRC_DIR/src/{{ name }}/lib/m64arm ]; then rm -rv $SRC_DIR/src/{{ name }}/lib/m64arm; fi  # [(osx and x86_64) or linux]
    - if [ -d $SRC_DIR/src/{{ name }}/lib/m64 ]; then rm -rv $SRC_DIR/src/{{ name }}/lib/m64; fi        # [(osx and arm64) or linux]
    - if [ -d $SRC_DIR/src/{{ name }}/lib/w64 ]; then rm -rv $SRC_DIR/src/{{ name }}/lib/w64; fi        # [linux or osx]
    - if [ -d $SRC_DIR/src/{{ name }}/lib/l64arm ]; then rm -rv $SRC_DIR/src/{{ name }}/lib/l64arm; fi  # [(linux and x86_64) or osx]
    - if [ -d $SRC_DIR/src/{{ name }}/lib/l64 ]; then rm -rv $SRC_DIR/src/{{ name }}/lib/l64; fi        # [(linux and aarch64) or osx]
    - del /q /s %SRC_DIR%\src\{{ name }}\lib\l64 %SRC_DIR%\src\{{ name }}\lib\l64arm %SRC_DIR%\src\{{ name }}\lib\m64 %SRC_DIR%\src\{{ name }}\lib\m64arm  # [win]
    - {{ PYTHON }} -m pip install . --no-deps --no-build-isolation -vv
    # fixing needed SO path on pre-built libobjstor delivered from upstream for linux
    - patchelf $SP_DIR/{{ name }}/lib/l64/libobjstor.so --replace-needed '$ORIGIN/libkurl.so' python$PY_VER/site-packages/{{ name }}/lib/l64/libkurl.so # [linux and x86_64]
  number: 0

requirements:
  build:
    - {{ compiler('c') }}
    - git       # [not win]
    - patch     # [not win]
    - m2-patch  # [win]
    - patchelf  # [linux]
  host:
    - python
    - cython 3.0.0
    - numpy 1.22  # [py!=37]
    - numpy 1.20  # [py==37]
    - setuptools
    - setuptools-scm 7.1.0
    - tomli 2.0.1
    - dlfcn-win32  # [win]
    - wheel
    - pip
  run:
    - python
    - pandas >=1.2
    - pytz >=2022.1
    - toml >=0.10.2,<0.11.0
    - {{ pin_compatible('numpy') }}

# skipping test version because regex in test is wrong
{% set tests_to_skip = "test_version" %}
# skipping test that fails because test does not expand relative path
{% set tests_to_skip = tests_to_skip + " or test_check_license_no_qlic" %}
# skip test import from other dir, because QHOME variables need to be reset (probably a bug in kx, not a dramatic one)
{% set tests_to_skip = tests_to_skip + " or test_import_from_other_dir" %}

### tests to skip because of missing kdb+ distribution  ###
# these tests should pass once kdb+ is downloaded from https://kx.com/kdb-personal-edition-download
# the link allows the personal edition to be downloaded once the person's details are entered.
# The files included in the download cannot be repacked in a conda package because for starters
# the license file contained is personal and also because it would have to be pushed to a private anaconda channel
# these tests have been however tested locally and they pass
{% set tests_to_skip_test_toq = "test_from_callable or test_from_arrow_licensed" %}
{% set tests_to_skip_test_util = "test_pickle_pykx_df_block_manager" %}
{% set tests_to_skip_test_ctx = "test_dot_q_errors or test_paths or test_update_global_context or test_dir or test_iter or test_reserved_words or test_ctx_no_overwrite_qerror or test_fqn or test_update_context or test_repr or test_with_block_errors_over_ipc or test_expunge or test_del or test_dot_z or test_dot_z" %}
{% set tests_to_skip_test_query = "test_upsert_match_schema or test_update or test_query_pa or test_delete or test_delete_async or test_update_async or test_insert_match_schema or test_select_async or test_exec_async or test_select or test_exec" %}
{% set tests_to_skip_test_wrappers = "test_t_property or test_is_atom or test_hash or test_pickling or test_t_attr or test_call_unlicensed or test_symbolic_function" %}
{% set tests_to_skip_test_system = "test_system_display_size_ipc or test_system_tables_ipc or test_system_precision_ipc or test_system_namespace_ipc or test_system_load_ipc or test_system_gc_mode_ipc or test_system_console_size_ipc or test_system_workspace_ipc or test_system_date_parsing_ipc or test_system_random_seed_ipc or test_system_functions_ipc or test_system_rename_ipc or test_system_week_offset_ipc or test_system_variables_ipc or test_system_utc_ipc or test_system_cd_ipc or test_num_threads" %}
{% set tests_to_skip_test_console = "test_basic_usage or test_q_error or test_input_eof_empty or test_entering_blank_lines or test_input_eof_newlines or test_input_eof_assignment or test_switching_mode or test_k_mode" %}
{% set tests_to_skip_test_q_future = "test_q_future_callbacks or test_q_future_errors or test_internal_await" %}
{% set tests_to_skip_test_write = "test_read_write_splayed or test_read_write_serialized_async or test_read_write_serialized or test_write_json or test_write_splayed or test_read_write_splayed_async  or test_read_write_csv_async or test_read_write_json_async or test_write_serialized or test_read_write_csv or test_read_write_json or test_write_csv" %}
{% set tests_to_skip_test_read = "test_read_csv or test_read_csv_with_type_guessing or test_read_json or test_read_fixed_async or test_read_serialized or test_read_fixed or test_read_splayed " %}
{% set tests_to_skip_test_q = "test_import_from_other_dir or test_delitem or test_attributes or test_call_with_params or test_call_sync or test_setitem or test_getitem or test_dir or test_setattr" %}
{% set tests_to_skip_test_ipc = "test_ipc_messaging_tcp_auth or test_async_deferred_calls or test_raw_await or test_memory_domain or test_ipc_messaging_tcp_compression_edge_case or test_no_pyfunc_over_ipc or test_raw_complex or test_tls_and_unix_error or test_ipc_messaging_unix or test_async_q_connection_clears_calls_on_close or test_raw_poll_send_recv_all or test_secure_q_con_callable or test_eventloop_gather_order or test_async_timeout or test_ipc_messaging_unix_auth or test_raw_poll_send_recv_one or test_async_q_connection or test_async_with_q_features or test_async_repr or test_no_pykx_namespace or test_async_helpful_error_for_closed_conn or test_max_error_length or test_no_wrap_over_ipc or test_uninitialized_connection or test_no_ctx_not_used or test_repr or test_raw_poll_send_recv_n or test_sync_helpful_error_for_closed_conn or test_ipc_messaging_tcp or test_timeout" %}
{% set tests_to_skip_test_config = "test_QHOME" %}

test:
  source_files:
    - tests
  commands:
    - pip check
    # classic import test fails without a license because of the disclaimer being printed out
    # but calling it this way circumvents that
    - python -c "import pykx"
    - mkdir q                     # [not win]
    - mkdir q                     # [win]
    - export QHOME=q              # [not win]
    - set QHOME=q                 # [win]
    - export QLIC=q               # [not win]
    - set QLIC=q                  # [win]
    # this is a workaround to get a kc.lic to be installed into the $QHOME directory. It's a personal license used only for the purpose of this
    # test and will expire on 10-31-2024, after which date, another one can be requested. KX sends an email with the base64 encoded string version
    # of the license.
    # the installation of this license allows to test all the licensed features of kx
    - python -c "import base64, os; t = '<insert-license-here>'; t = t.encode('ascii'); decoded = base64.decodebytes(t); bf = open(os.path.join('q','kc.lic'), 'wb'); bf.write(decoded); bf.close()"
    # these are the tests where at least one test requires a kbd+ installations
    # - pytest -n auto -k "not ({{ tests_to_skip_test_toq }})" tests/test_toq.py
    # - pytest -n auto -k "not ({{ tests_to_skip_test_util }})" tests/test_util.py
    # - pytest -n auto -k "not ({{ tests_to_skip_test_ctx }})" tests/test_ctx.py
    # - pytest -n auto -k "not ({{ tests_to_skip_test_query }})" tests/test_query.py
    # - pytest -n auto -k "not ({{ tests_to_skip_test_wrappers }})" tests/test_wrappers.py
    # - pytest -n auto -k "not ({{ tests_to_skip_test_system }})" tests/test_system.py
    # - pytest -n auto -k "not ({{ tests_to_skip_test_console }})" tests/test_console.py
    # - pytest -n auto -k "not ({{ tests_to_skip_test_q_future }})" tests/test_q_future.py
    # - pytest -n auto -k "not ({{ tests_to_skip_test_write }})" tests/test_write.py
    # - pytest -n auto -k "not ({{ tests_to_skip_test_read }})" tests/test_read.py
    # - pytest -n auto -k "not ({{ tests_to_skip_test_q }})" tests/test_q.py
    # - pytest -n auto -k "not ({{ tests_to_skip_test_ipc }})" tests/test_ipc.py
    # - pytest -n auto -k "not ({{ tests_to_skip_test_config }})" tests/test_config.py
    # # these are all other tests
    # - pytest -n auto -k "not ({{ tests_to_skip }})" test/test_cast.py test/test_pandas_apply.py test/test_register.py test/test_sql.py test/test_cloud_edition.py test/test_license.py
    # - pytest -n auto -k "not ({{ tests_to_skip }})" test/test_pandas_set_index.py  test/test_q_foreign.py  test/test_random.py test/test_exceptions.py  test/test_pandas_api.py  test/test_pykx.py test/test_schema.py
  requires:
    - pip
    - plotly
    - pytest
    - pytest-asyncio
    - pytest-benchmark
    - pytest-xdist
    - pytest-randomly
    - psutil
    - pytest-timeout
    - pyarrow         # [not s390x]

about:
  home: https://code.kx.com/pykx
  license: LGPL-3.0 AND Apache-2.0
  license_file:
    - LICENSE.txt
    - src/pykx/license.py
  license_family: Other
  summary: An interface between Python and q.
  description: |
    PyKX is a Python first interface to the worlds fastest time-series database kdb+ and it's underlying vector
    programming language q. PyKX takes a Python first approach to integrating q/kdb+ with Python following 10+ years of
    integrations between these two languages. Fundamentally it provides users with the ability to efficiently query and
    analyze huge amounts of in-memory and on-disk time-series data.
  doc_url: https://code.kx.com/pykx
  dev_url: https://github.com/KxSystems/pykx

extra:
  recipe-maintainers:
    - boldorider4
  skip-lints:
    - missing_imports_or_run_test_py
